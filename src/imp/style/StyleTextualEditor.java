/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imp.gui;

import imp.com.StylesToEditorCommand;
import imp.data.advice.Advisor;
import static imp.gui.SourceEditorDialog.STYLE;
import java.io.PrintWriter;
import java.io.StringWriter;

import imp.com.*;
import imp.data.Score;
import imp.roadmap.RoadMapFrame;
import imp.util.BasicEditor;
import polya.Polylist;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.Writer;
import java.io.IOException;
import java.awt.Frame;
import imp.style.StyleEditor;

/**
 *
 * @author isysjo
 */
public class StyleTextualEditor extends javax.swing.JDialog implements BasicEditor {

    private String title = "";
    private String contents = "";
    File contentsFile;
    StyleEditor parent;
    /**
     * Creates new form StyleTextualEditor
     */
    public StyleTextualEditor(StyleEditor parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sourceEditorScrollPane = new javax.swing.JScrollPane();
        sourceEditor = new javax.swing.JTextArea();
        editorToSourceButton = new javax.swing.JButton();
        sourceToEditorButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        sourceEditorScrollPane.setMinimumSize(new java.awt.Dimension(600, 20000));
        sourceEditorScrollPane.setPreferredSize(new java.awt.Dimension(600, 20000));
        sourceEditorScrollPane.setVerifyInputWhenFocusTarget(false);

        sourceEditor.setColumns(20);
        sourceEditor.setLineWrap(true);
        sourceEditor.setRows(5);
        sourceEditor.setAutoscrolls(false);
        sourceEditor.setMinimumSize(new java.awt.Dimension(600, 40000));
        sourceEditor.setPreferredSize(new java.awt.Dimension(600, 40000));
        sourceEditorScrollPane.setViewportView(sourceEditor);

        getContentPane().add(sourceEditorScrollPane, java.awt.BorderLayout.CENTER);

        editorToSourceButton.setText("Editor to Style");
        editorToSourceButton.setToolTipText("Load the current leadsheet to the textual editor.\n");
        editorToSourceButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editorToSourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editorToSourceButtonActionPerformed(evt);
            }
        });
        getContentPane().add(editorToSourceButton, java.awt.BorderLayout.SOUTH);

        sourceToEditorButton.setText("Style to Editor");
        sourceToEditorButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sourceToEditorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourceToEditorButtonActionPerformed(evt);
            }
        });
        getContentPane().add(sourceToEditorButton, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editorToSourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editorToSourceButtonActionPerformed

           // Get the contents of the edit window.
        String contents = sourceEditor.getText();
        
        
        // Parse into individual items ("rules").
        Polylist rules = Notate.parseListFromString(contents);
        System.out.println(rules);
        if(rules.isEmpty())
            return;
        
        // Add the rules back as style specifications.
        while( rules.nonEmpty() ) {
            if(rules.first() instanceof Polylist)
                Advisor.addUserRule((Polylist)rules.first());
            rules = rules.rest();
        }
        
       setContents(rules.toString());
       stringToFile(contents); 
  
   
   // saves the contentsStyle to savedstyle variable in the style editor
   //to possibly be used somewhere in savedstyle?
        //FIX parent.setSavedStyle(contentsFile);

    }//GEN-LAST:event_editorToSourceButtonActionPerformed
 
    private void setContents(String str)
    {
        contents = str;
    }
    
     private String getContents()
    {
        return contents;
    }
    
    public void fillEditor()
    {
        
        StringWriter writer = new StringWriter();
        PrintWriter out = new PrintWriter(writer);
        try {
            Advisor.saveStyles(out);
            out.close();
        } catch( Exception e ) {}
        setSize(600, 2000);
        setText(writer.toString());
 //cm.execute(new StylesToEditorCommand(this));
          
//        }
//    if( firstTime )
//      {
//      sourceEditor.moveCaretPosition(0);
//      firstTime = false;
      
    }
    
    private void stringToFile(String str) {
        contentsFile = new File(str);
        
    }
    
    public File getContentsFile()
    {
        return contentsFile;
    }
 
     @Override
    public String getTitle() {
        return title;
    }
    
    public String getText() {
        return sourceEditor.getText();
    }
    
    public void setText(String text) {
      
        sourceEditor.setSize(600, 2000);
        sourceEditor.setText(text);
    }

    public void setRows(int numRows)
    {
        sourceEditor.setRows(numRows);
    }
    private void sourceToEditorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourceToEditorButtonActionPerformed
        fillEditor();
    }//GEN-LAST:event_sourceToEditorButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton editorToSourceButton;
    private javax.swing.JTextArea sourceEditor;
    private javax.swing.JScrollPane sourceEditorScrollPane;
    private javax.swing.JButton sourceToEditorButton;
    // End of variables declaration//GEN-END:variables
}
