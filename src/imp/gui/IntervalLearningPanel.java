/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imp.gui;

import imp.Constants;
import imp.data.ChordPart;
import imp.data.IntervalLearner;
import imp.data.MelodyGenerator;
import imp.data.MelodyPart;
import imp.data.RhythmGenerator;
import imp.lickgen.Grammar;
import imp.lickgen.LickGen;
import java.awt.Color;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JLabel;
import polya.Polylist;

/**
 *
 * @author muddCS15
 */
public class IntervalLearningPanel extends javax.swing.JPanel {

    private Notate notate;
    private JLabel [][] probabilityLabels;
    private double[][] probabilities;
    private int [] range;
    private boolean preRectify;
//    private JLabel [] sourceLabels;
//    private JLabel [] destLabels;
    
    /**
     * Creates new form IntervalLearningPanel
     */
    public IntervalLearningPanel(Notate notate) {
        this.notate = notate;
        initComponents();
        range = new int [2];
        //default
        range[0] = Constants.G3;
        range[1] = Constants.G5;
        probabilityLabels = new JLabel[26][26];
        for(int row = 0; row<probabilityLabels.length; row++){
            for(int column = 0; column<probabilityLabels[row].length; column++){
                
                probabilityLabels[row][column] = new JLabel();
                if(row == 0 && column == 0){
                    probabilityLabels[row][column].setText("X");
                }else if(row == 0){
                    probabilityLabels[row][column].setText(Integer.toString(column-Constants.OCTAVE-1));
                }else if(column == 0){
                    probabilityLabels[row][column].setText(Integer.toString(row-Constants.OCTAVE-1));
                }else{
                    probabilityLabels[row][column].setText("n/a"); 
                }
                
                if(row == 0 || column == 0){
                    probabilityLabels[row][column].setOpaque(true);
                    probabilityLabels[row][column].setBackground(Color.MAGENTA);
                }
                else if(row == Constants.OCTAVE+1 || column == Constants.OCTAVE+1){
                    probabilityLabels[row][column].setOpaque(true);
                    probabilityLabels[row][column].setBackground(Color.green);
                }else{
                    probabilityLabels[row][column].setOpaque(true);
                    probabilityLabels[row][column].setBackground(Color.WHITE);
                }
                probabilitiesPanel.add(probabilityLabels[row][column]);
                preRectify = preRectifyButton.isSelected();
            }
        }
//        sourceLabels = new JLabel[25];
//        
//        for(int i = 0; i<sourceLabels.length; i++){
//            sourceLabels[i] = new JLabel(Integer.toString(i-Constants.OCTAVE));
//            sourceIntervals.add(sourceLabels[i]);
//        }
//        
//        
//        destLabels = new JLabel[25];
//        for(int i = 0; i<destLabels.length; i++){
//            destLabels[i] = new JLabel(Integer.toString(i-Constants.OCTAVE));
//            destinationIntervals.add(destLabels[i]);
//        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        preAndPost = new javax.swing.ButtonGroup();
        probabilitiesPanel = new javax.swing.JPanel();
        sourceIntervals = new javax.swing.JLabel();
        destinationIntervals = new javax.swing.JLabel();
        buttonsPanel = new javax.swing.JPanel();
        learnProbabilitiesButton = new javax.swing.JButton();
        learnFromAll = new javax.swing.JButton();
        QNsoloButton = new javax.swing.JButton();
        chooseRange = new javax.swing.JButton();
        rhythmSolo = new javax.swing.JButton();
        grammarRhythmSolo = new javax.swing.JButton();
        preRectifyButton = new javax.swing.JRadioButton();
        postRectifyButton = new javax.swing.JRadioButton();

        setLayout(new java.awt.GridBagLayout());

        probabilitiesPanel.setLayout(new java.awt.GridLayout(26, 26, 5, 5));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        add(probabilitiesPanel, gridBagConstraints);

        sourceIntervals.setText("Source Intervals");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        add(sourceIntervals, gridBagConstraints);

        destinationIntervals.setText("Destination Intervals");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        add(destinationIntervals, gridBagConstraints);

        buttonsPanel.setLayout(new java.awt.GridBagLayout());

        learnProbabilitiesButton.setText("Learn Interval Probabilities for this Chorus");
        learnProbabilitiesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                learnProbabilitiesButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        buttonsPanel.add(learnProbabilitiesButton, gridBagConstraints);

        learnFromAll.setText("Learn Interval Probabilities for all Choruses");
        learnFromAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                learnFromAllActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        buttonsPanel.add(learnFromAll, gridBagConstraints);

        QNsoloButton.setText("Generate Eigth Note Solo in new Chorus");
        QNsoloButton.setEnabled(false);
        QNsoloButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QNsoloButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        buttonsPanel.add(QNsoloButton, gridBagConstraints);

        chooseRange.setText("Choose Range");
        chooseRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseRangeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        buttonsPanel.add(chooseRange, gridBagConstraints);

        rhythmSolo.setText("Generate Solo w/ Same Rhythm as Chorus 1");
        rhythmSolo.setEnabled(false);
        rhythmSolo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rhythmSoloActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        buttonsPanel.add(rhythmSolo, gridBagConstraints);

        grammarRhythmSolo.setText("Generate Solo w/ Grammar-Generated Rhythm");
        grammarRhythmSolo.setEnabled(false);
        grammarRhythmSolo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grammarRhythmSoloActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        buttonsPanel.add(grammarRhythmSolo, gridBagConstraints);

        preAndPost.add(preRectifyButton);
        preRectifyButton.setSelected(true);
        preRectifyButton.setText("Pre-Rectify");
        preRectifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preRectifyButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        buttonsPanel.add(preRectifyButton, gridBagConstraints);

        preAndPost.add(postRectifyButton);
        postRectifyButton.setText("Post-Rectify");
        postRectifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postRectifyButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        buttonsPanel.add(postRectifyButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        add(buttonsPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void learnProbabilitiesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_learnProbabilitiesButtonActionPerformed
        IntervalLearner learner = new IntervalLearner(notate.getCurrentMelodyPart());
        probabilities = learner.probabilities();
        DecimalFormat df = new DecimalFormat("#.##");
        for(int row = 0; row < probabilities.length; row++){
            for(int column = 0; column < probabilities[row].length; column++){
                probabilityLabels[row+1][column+1].setText(df.format(probabilities[row][column]));
            }
        }
        QNsoloButton.setEnabled(true);
        rhythmSolo.setEnabled(true);
        grammarRhythmSolo.setEnabled(true);
        probabilitiesPanel.repaint();
    }//GEN-LAST:event_learnProbabilitiesButtonActionPerformed

    private void learnFromAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_learnFromAllActionPerformed
        int [][] counts = new int[IntervalLearner.intervals][IntervalLearner.intervals];
        for(int [] row : counts){
            for(int c = 0; c < row.length; c++){
                row[c] = 0;
            }
        }
        for(int i = 0; i < notate.getScore().size(); ++i){
            MelodyPart learnFromThis = notate.getMelodyPart(notate.getStaveAtTab(i));
            IntervalLearner learner = new IntervalLearner(learnFromThis);
            int [][] specificCounts = learner.counts();
            for(int row = 0; row < counts.length; row++){
                for(int c = 0; c < counts[row].length; c++){
                    counts[row][c] += specificCounts[row][c];
                }
            }
        }
        probabilities = IntervalLearner.probabilities(counts);
        DecimalFormat df = new DecimalFormat("#.##");
        for(int row = 0; row < probabilities.length; row++){
            for(int column = 0; column < probabilities[row].length; column++){
                probabilityLabels[row+1][column+1].setText(df.format(probabilities[row][column]));
            }
        }
        QNsoloButton.setEnabled(true);
        rhythmSolo.setEnabled(true);
        grammarRhythmSolo.setEnabled(true);
        probabilitiesPanel.repaint();
    }//GEN-LAST:event_learnFromAllActionPerformed

    private void QNsoloButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QNsoloButtonActionPerformed
        ChordPart chords = notate.getChordProg();
        RhythmGenerator rgen = new RhythmGenerator(notate.getScore().getLength());
        MelodyPart rhythm = rgen.rhythm(Constants.EIGHTH);
        MelodyGenerator mgen = new MelodyGenerator(probabilities, rhythm, chords, range, preRectify);
        MelodyPart result = mgen.melody();
        notate.addChorus(result);
    }//GEN-LAST:event_QNsoloButtonActionPerformed

    private void chooseRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseRangeActionPerformed
        RangeChooser chooser = new RangeChooser(notate, range[0], range[1], Constants.OCTAVE);
        range = chooser.getRange();
    }//GEN-LAST:event_chooseRangeActionPerformed

    private void rhythmSoloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rhythmSoloActionPerformed
        ChordPart chords = notate.getChordProg();
        //RhythmGenerator rgen = new RhythmGenerator(notate.getScore().getLength());
        //MelodyPart rhythm = rgen.rhythm(Constants.EIGHTH);
        MelodyPart rhythm = notate.getScore().getPart(0);
        MelodyGenerator mgen = new MelodyGenerator(probabilities, rhythm, chords, range, preRectify);
        MelodyPart result = mgen.melody();
        notate.addChorus(result);
    }//GEN-LAST:event_rhythmSoloActionPerformed

    private void grammarRhythmSoloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grammarRhythmSoloActionPerformed
        //LickGen gen = notate.getLickGen();
        //String grammarName = notate.getGrammarFileName();
        //Grammar gram = new Grammar(grammarName);
//        ArrayList<Polylist> params = gram.getParams();
//        int minDur;
//        int maxDur;
//        double restProb;
//        Polylist rhythm = gen.generateRandomRhythm(notate.getScoreLength(), minDur, maxDur, restProb);
//        //Polylist rhythm = gen.generateRhythmFromGrammar(0, notate.getScoreLength());
//        System.out.println(rhythm);
        ChordPart chords = notate.getChordProg();
        MelodyGenerator mgen = new MelodyGenerator(probabilities, notate, chords, range, preRectify);
        MelodyPart result = mgen.melody();
        notate.addChorus(result);
    }//GEN-LAST:event_grammarRhythmSoloActionPerformed

    private void preRectifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preRectifyButtonActionPerformed
        preRectify = preRectifyButton.isSelected();
    }//GEN-LAST:event_preRectifyButtonActionPerformed

    private void postRectifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postRectifyButtonActionPerformed
        preRectify = preRectifyButton.isSelected();
    }//GEN-LAST:event_postRectifyButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton QNsoloButton;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton chooseRange;
    private javax.swing.JLabel destinationIntervals;
    private javax.swing.JButton grammarRhythmSolo;
    private javax.swing.JButton learnFromAll;
    private javax.swing.JButton learnProbabilitiesButton;
    private javax.swing.JRadioButton postRectifyButton;
    private javax.swing.ButtonGroup preAndPost;
    private javax.swing.JRadioButton preRectifyButton;
    private javax.swing.JPanel probabilitiesPanel;
    private javax.swing.JButton rhythmSolo;
    private javax.swing.JLabel sourceIntervals;
    // End of variables declaration//GEN-END:variables
}
