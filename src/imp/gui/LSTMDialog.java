/**
 * This Java Class is part of the Impro-Visor Application.
 *
 * Copyright (C) 2016 Robert Keller and Harvey Mudd College.
 *
 * Impro-Visor is free software; you can redistribute it and/or modifyc it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * Impro-Visor is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of merchantability or fitness
 * for a particular purpose. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Impro-Visor; if not, write to the Free Software Foundation, Inc., 51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301 USA
 */
package imp.gui;

import imp.Constants;
import imp.ImproVisor;
import imp.com.PasteCommand;
import imp.com.PlayScoreCommand;
import imp.data.ChordPart;
import imp.data.MelodyPart;
import java.util.Enumeration;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.JRadioButton;
import imp.gui.Notate.Mode;
import imp.util.TransformFilter;
import java.io.File;

/**
 * Display that lets the user control the options for generating an LSTM line. 
 * @author Adapted from code for GuideToneLine by Mikayla Konst and Carli Lessard
 */
public class LSTMDialog extends javax.swing.JDialog implements Constants {

    private final Notate notate;
    
    private String fileStem = "LSTM";
    
    MelodyPart lstmLine;
    /**
     * Creates new form GuideToneLineDialog
     * @param notate Frame that spawned this dialog box
     */
    public LSTMDialog(Notate notate) {
        super(notate, false);
        this.setTitle("Generate LSTM Line");
        this.setResizable(true);
        this.notate = notate;
        initComponents();
        File dir = ImproVisor.getTransformDirectory();
        File file = new File(dir, fileStem + TransformFilter.EXTENSION);
        lstmLine = new MelodyPart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        directionButtons = new javax.swing.ButtonGroup();
        numberOfLinesButtons = new javax.swing.ButtonGroup();
        scaleDegreeButtons = new javax.swing.ButtonGroup();
        maxDurationButtons = new javax.swing.ButtonGroup();
        lineTypeButtons = new javax.swing.ButtonGroup();
        scaleDegree2Buttons = new javax.swing.ButtonGroup();
        buttonPanel = new javax.swing.JPanel();
        generateLine = new javax.swing.JButton();
        playPanel = new javax.swing.JPanel();
        playBtn = new javax.swing.JButton();
        pauseBtn = new javax.swing.JToggleButton();
        stopBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(600, 600));
        setMinimumSize(new java.awt.Dimension(600, 600));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        buttonPanel.setLayout(new java.awt.GridBagLayout());

        generateLine.setText("Generate LSTM Solo");
        generateLine.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                generateLineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        buttonPanel.add(generateLine, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 16;
        getContentPane().add(buttonPanel, gridBagConstraints);

        playPanel.setLayout(new java.awt.GridBagLayout());

        playBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/toolbar/play.gif"))); // NOI18N
        playBtn.setToolTipText("Play the entire leadsheet, starting with the first chorus.\nTo play just the current chorus, select the first beat of that chorus and press Shift-Enter.");
        playBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        playBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        playBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        playBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        playBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                playBtnActionPerformed(evt);
            }
        });
        playPanel.add(playBtn, new java.awt.GridBagConstraints());

        pauseBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/toolbar/pause.gif"))); // NOI18N
        pauseBtn.setToolTipText("Pause or resume playback.");
        pauseBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pauseBtn.setEnabled(false);
        pauseBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        pauseBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        pauseBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        pauseBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                pauseBtnActionPerformed(evt);
            }
        });
        playPanel.add(pauseBtn, new java.awt.GridBagConstraints());

        stopBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/toolbar/stop.gif"))); // NOI18N
        stopBtn.setToolTipText("Stop playback.");
        stopBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        stopBtn.setEnabled(false);
        stopBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        stopBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        stopBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        stopBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                stopBtnActionPerformed(evt);
            }
        });
        playPanel.add(stopBtn, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 17;
        getContentPane().add(playPanel, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    private void generateLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateLineActionPerformed
        generateLine();
        putLineInNewChorus();
    }//GEN-LAST:event_generateLineActionPerformed

    private void generateLine(){
        ChordPart chords = notate.getChordProg();

        LSTMlineGenerator lstmGenerator = new LSTMlineGenerator(chords);
        
        lstmLine = lstmGenerator.makeLSTMline();
        }

    
    private void putLineInNewChorus(){
        if(lstmLine != null && lstmLine.getSize() != 0){
            notate.addChorus(lstmLine);
        }
    }
    
    private void putLineInCurrentChorus(){
        if(lstmLine != null && lstmLine.getSize() != 0){
            notate.getCurrentMelodyPart().newPasteOver(lstmLine, 0);
        }
    }
    
    //used in trading
    public void generatePastePlay(){
        generateLine();
        putLineInCurrentChorus();
        play();
    }
    
    //used in trading w transform / fractal division
    public void generatePaste(){
        generateLine();
        putLineInCurrentChorus();
    }
    
     /**
     * play
     * play the melody in the current chorus
     */
    private void play(){
        notate.selectAll();
        notate.playCurrentSelection(true, 
                                        0, 
                                        PlayScoreCommand.USEDRUMS, 
                                        "LSTM line");
        ImproVisor.setPlayEntrySounds(true);
    }
    
    
    public void updateButtons(){
 
        setVisible(isVisible());
    }
    
    /**
     * 
     * @param group ButtonGroup to enable/disable
     * @param enabled true to enable, false to disable
     */
    private void enableButtons(ButtonGroup group, boolean enabled){
        for(Enumeration<AbstractButton> buttons = group.getElements(); buttons.hasMoreElements();){
            AbstractButton b = buttons.nextElement();
            b.setEnabled(enabled);
        }
    }
        
 
    public void updatePlayButtons(){
        playBtn.setEnabled(notate.getPlayEnabled());
        pauseBtn.setEnabled(notate.getPauseEnabled());
        stopBtn.setEnabled(notate.getStopEnabled());
        
        playBtn.setSelected(notate.getPlaySelected());
        pauseBtn.setSelected(notate.getPauseSelected());
        stopBtn.setSelected(notate.getStopSelected());
    }
    
    
    private void playBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playBtnActionPerformed
        notate.improvisationOff();
        notate.playAll();
        
        updatePlayButtons();
    }//GEN-LAST:event_playBtnActionPerformed

    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        notate.stopButtonPressed();
        
        updatePlayButtons();
    }//GEN-LAST:event_stopBtnActionPerformed

    private void pauseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseBtnActionPerformed
        if( notate.getMode() == Mode.PLAYING_PAUSED )
        {
            notate.setMode(Mode.PLAYING);
        }
        else
        {
            notate.setMode(Mode.PLAYING_PAUSED);
        }
        notate.pauseScore();
        if( notate.getKeyboard() != null )
        {
            String v = notate.getKeyboard().voicingFromKeyboard();
            String currentChord = notate.getKeyboard().getPresentChordDisplayText();

            if( notate.getVoicingTestFrame() != null && notate.getVoicingTestFrame().isVisible() )
            {
                notate.selectVoicing(v, currentChord);
            }
        }

        updatePlayButtons();
    }//GEN-LAST:event_pauseBtnActionPerformed

    /**
     * returns which JRadioButton in a ButtonGroup is selected
     * @param group the ButtonGroup from which you want to return the selected button
     * @return the JRadioButton that is selected
     */
    private JRadioButton getSelected(ButtonGroup group){
        for(Enumeration<AbstractButton> buttons = group.getElements(); buttons.hasMoreElements();){
            AbstractButton b = buttons.nextElement();
            if(b.isSelected()){
                return (JRadioButton)b;
            }
        }
        return null;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.ButtonGroup directionButtons;
    private javax.swing.JButton generateLine;
    private javax.swing.ButtonGroup lineTypeButtons;
    private javax.swing.ButtonGroup maxDurationButtons;
    private javax.swing.ButtonGroup numberOfLinesButtons;
    private javax.swing.JToggleButton pauseBtn;
    private javax.swing.JButton playBtn;
    private javax.swing.JPanel playPanel;
    private javax.swing.ButtonGroup scaleDegree2Buttons;
    private javax.swing.ButtonGroup scaleDegreeButtons;
    private javax.swing.JButton stopBtn;
    // End of variables declaration//GEN-END:variables


    /**
     * Pastes source melody over dest melody at startingSlot. This calls the 
     * PasteCommand so that undo and redo can be used in notate. 
     * @param dest
     * @param source
     * @param startingSlot 
     */
    public void pasteOver(MelodyPart dest, MelodyPart source, int startingSlot)
    {
        PasteCommand paste = new PasteCommand(source,dest,startingSlot,false);
        notate.cm.execute(paste);
    }

}
