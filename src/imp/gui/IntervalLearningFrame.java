/**
 * This Java Class is part of the Impro-Visor Application.
 *
 * Copyright (C) 2005-2015 Robert Keller and Harvey Mudd College.
 *
 * Impro-Visor is free software; you can redistribute it and/or modifyc it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * Impro-Visor is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of merchantability or fitness
 * for a particular purpose. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Impro-Visor; if not, write to the Free Software Foundation, Inc., 51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301 USA
 */

/*
 * TransformFrame.java
 *
 * Created on July 27, 2015, 4:57:53 PM
 */
package imp.gui;
import imp.data.*;
import imp.lickgen.LickGen;
import java.awt.*;
import java.io.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import polya.Polylist;
import polya.Tokenizer;

/**
 * @author Alex Putman
  */
public class IntervalLearningFrame
        extends javax.swing.JFrame
        implements imp.Constants {

    
    private Notate notate;
    
    private IntervalLearningPanel intervalLearningTab;
    /**
     * Creates new LickgenFrame
     */
    public IntervalLearningFrame(Notate notate) {
        this.notate = notate;
        initComponents();

        intervalLearningTab = new IntervalLearningPanel(notate);
        intervalLearningPanelHolder.add(intervalLearningTab, new GridLayout(1, 1, 1, 1));
    }


    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        transformPane = new javax.swing.JTabbedPane();
        intervalLearningPanelHolder = new javax.swing.JPanel();
        transformMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newFile = new javax.swing.JMenuItem();
        openFile = new javax.swing.JMenuItem();
        addFromFile = new javax.swing.JMenuItem();
        saveFile = new javax.swing.JMenuItem();
        generatorWindowMenu1 = new javax.swing.JMenu();
        closeWindowMI2 = new javax.swing.JMenuItem();
        cascadeMI2 = new javax.swing.JMenuItem();
        windowMenuSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Interval Learning Controls");
        setMinimumSize(new java.awt.Dimension(1000, 850));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                closeWindow(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        transformPane.setBackground(new java.awt.Color(218, 215, 215));
        transformPane.setMinimumSize(new java.awt.Dimension(1200, 700));
        transformPane.setPreferredSize(new java.awt.Dimension(1200, 700));

        intervalLearningPanelHolder.setLayout(new java.awt.GridLayout(1, 0));
        transformPane.addTab("Interval Learning", intervalLearningPanelHolder);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(transformPane, gridBagConstraints);

        transformMenuBar.setMinimumSize(new java.awt.Dimension(115, 23));

        fileMenu.setMnemonic('G');
        fileMenu.setText("File");
        fileMenu.setToolTipText("Edit or change the current counts file.");
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        newFile.setText("New");
        newFile.setToolTipText("Create a new counts file.");
        newFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileActionPerformed(evt);
            }
        });
        fileMenu.add(newFile);

        openFile.setText("Open");
        openFile.setToolTipText("Load a counts file.");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        fileMenu.add(openFile);

        addFromFile.setText("Add From...");
        addFromFile.setToolTipText("Add from a counts file.");
        addFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFromFileActionPerformed(evt);
            }
        });
        fileMenu.add(addFromFile);

        saveFile.setText("Save");
        saveFile.setToolTipText("Save the current counts file.");
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });
        fileMenu.add(saveFile);

        transformMenuBar.add(fileMenu);

        generatorWindowMenu1.setLabel("Window");
        generatorWindowMenu1.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                generatorWindowMenu1MenuSelected(evt);
            }
        });

        closeWindowMI2.setMnemonic('C');
        closeWindowMI2.setText("Close Window");
        closeWindowMI2.setToolTipText("Closes the current window (exits program if there are no other windows)");
        closeWindowMI2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeWindowMI2ActionPerformed(evt);
            }
        });
        generatorWindowMenu1.add(closeWindowMI2);

        cascadeMI2.setMnemonic('A');
        cascadeMI2.setText("Cascade Windows");
        cascadeMI2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cascadeMI2ActionPerformed(evt);
            }
        });
        generatorWindowMenu1.add(cascadeMI2);
        generatorWindowMenu1.add(windowMenuSeparator2);

        transformMenuBar.add(generatorWindowMenu1);

        setJMenuBar(transformMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void stopPlaying() {
        notate.stopPlaying();
    }

                        private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
                            // TODO add your handling code here:
                        }//GEN-LAST:event_fileMenuActionPerformed

                        private void closeWindowMI2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeWindowMI2ActionPerformed
                            closeWindow();
                        }//GEN-LAST:event_closeWindowMI2ActionPerformed
    public void closeWindow() {
        this.setVisible(false);

        WindowRegistry.unregisterWindow(this);
    }


                        private void cascadeMI2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cascadeMI2ActionPerformed
                            WindowRegistry.cascadeWindows(this);
                        }//GEN-LAST:event_cascadeMI2ActionPerformed

                        private void generatorWindowMenu1MenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_generatorWindowMenu1MenuSelected

                            generatorWindowMenu1.removeAll();

                            generatorWindowMenu1.add(closeWindowMI2);

                            generatorWindowMenu1.add(cascadeMI2);

                            generatorWindowMenu1.add(windowMenuSeparator2);

                            for (WindowMenuItem w : WindowRegistry.getWindows()) {

                                generatorWindowMenu1.add(w.getMI(this));      // these are static, and calling getMI updates the name on them too in case the window title changed
                            }

                            generatorWindowMenu1.repaint();

                        }//GEN-LAST:event_generatorWindowMenu1MenuSelected

                        private void closeWindow(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeWindow
                            closeWindow();
                        }//GEN-LAST:event_closeWindow

    private void newFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileActionPerformed
        intervalLearningTab.newFile();
    }//GEN-LAST:event_newFileActionPerformed

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        try {
            intervalLearningTab.open();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(IntervalLearningPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openFileActionPerformed

    private void addFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFromFileActionPerformed
        try {
            intervalLearningTab.addFromFile();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(IntervalLearningPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addFromFileActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        try {
            intervalLearningTab.saveCounts();
        } catch (IOException ex) {
            Logger.getLogger(IntervalLearningPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveFileActionPerformed

    public void intervalImprovise(){
        intervalLearningTab.generateSolo();
    }
    
/**
 * Fill an abstract or relative-pitch melody from text, such as acquired from
 * either abstract melody or relative pitch melody field.
 * If the text is not already a Polylist, this will first make a Polylist
 * out of it.
 *
 * @param r
 */
public void fillMelodyFromText(String r)
  {
    r = r.trim();
    if( r.equals("") )
      {
        return; // no text specified
      }
    if( r.charAt(0) != '(' )
      {
        r = "(".concat(r);
      }

    if( r.charAt(r.length() - 1) != ')' )
      {
        r = r.concat(")");
      }

    Polylist rhythm = new Polylist();
    StringReader rhythmReader = new StringReader(r);
    Tokenizer in = new Tokenizer(rhythmReader);
    Object ob;

    while( (ob = in.nextSexp()) != Tokenizer.eof )
      {
        if( ob instanceof Polylist )
          {
            rhythm = (Polylist) ob;
          }
      }

    notate.generateAndPutLick(rhythm);
  }

public MelodyPart fillAndReturnMelodyFromText(String r, ChordPart chordPart)
  {
    r = r.trim();
    if( r.equals("") )
      {
        return new MelodyPart(); // no text specified
      }
    if( r.charAt(0) != '(' )
      {
        r = "(".concat(r);
      }

    if( r.charAt(r.length() - 1) != ')' )
      {
        r = r.concat(")");
      }

    Polylist rhythm = new Polylist();
    StringReader rhythmReader = new StringReader(r);
    Tokenizer in = new Tokenizer(rhythmReader);
    Object ob;

    while( (ob = in.nextSexp()) != Tokenizer.eof )
      {
        if( ob instanceof Polylist )
          {
            rhythm = (Polylist) ob;
          }
      }

    return notate.generateLick(rhythm, chordPart);
  }

    private boolean saveImp = false;
    public void setSaveImp(boolean value)
    {
        saveImp = value;
    }
    public boolean shouldSaveImp(){
        return saveImp;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addFromFile;
    private javax.swing.JMenuItem cascadeMI2;
    private javax.swing.JMenuItem closeWindowMI2;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu generatorWindowMenu1;
    private javax.swing.JPanel intervalLearningPanelHolder;
    private javax.swing.JMenuItem newFile;
    private javax.swing.JMenuItem openFile;
    private javax.swing.JMenuItem saveFile;
    private javax.swing.JMenuBar transformMenuBar;
    private javax.swing.JTabbedPane transformPane;
    private javax.swing.JSeparator windowMenuSeparator2;
    // End of variables declaration//GEN-END:variables

}
