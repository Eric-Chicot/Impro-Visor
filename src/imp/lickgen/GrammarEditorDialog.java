/**
 * This Java Class is part of the Impro-Visor Application
 *
 * Copyright (C) 2005-2019 Robert Keller and Harvey Mudd College
 *
 * Impro-Visor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Impro-Visor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * merchantability or fitness for a particular purpose.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Impro-Visor; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

package imp.lickgen;

import imp.gui.*;
import imp.com.*;
import imp.util.BasicEditor;
import java.awt.Point;

/**
 *
 * @author  David Morrison, adapted by Robert Keller
 */
public class GrammarEditorDialog extends javax.swing.JDialog implements BasicEditor
{
     /**
     * Used as a prefix on editor window titles
     */
    
    Notate notate;
    java.awt.Frame frameParent;
    CommandManager cm;
    int type;
    
    public static final String titlePrefix = "Editor For: ";
    
    public static final int LEADSHEET = 0;
    public static final int GRAMMAR = 1;
    public static final int STYLE = 2;
    public static final int DICTIONARY = 3;
    public static final String[] typeStr = {"Leadsheet", "Grammar", "Style", "Dictionary"};

    public static String editorTitlePrefix = "Editor for: ";
    
    private boolean firstTime = true;
   
    /** Creates new form sourceEditorDialog */
    public GrammarEditorDialog(java.awt.Frame parent, boolean modal, Notate p, CommandManager cm, int type)
    {
        super(parent, modal);
        frameParent = parent;
        this.notate = p;
        this.cm = cm;
        this.type = type;
        initComponents();
        setSize(200,200);
        setTitle("");
        editorToSourceButton.setText("Editor to " + typeStr[type]);
        sourceToEditorButton.setText(typeStr[type] + " to Editor");        
        sourceEditor.setFont(new java.awt.Font("Lucida Console", java.awt.Font.PLAIN, 13));
    }

    private String title = "";
    @Override
    public void setTitle(String title) {
        this.title = title;
        super.setTitle(titlePrefix + title);
    }
    
    @Override
    public String getTitle() {
        return title;
    }
    
    @Override
    public String getText() {
        return sourceEditor.getText();
    }
    
    @Override
    public void setText(String text) {
      
        sourceEditor.setSize(600, 2000);
        sourceEditor.setText(text);
    }

    @Override
    public void setRows(int numRows)
    {
        sourceEditor.setRows(numRows);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        grammarChooserButton = new javax.swing.JButton();
        sourceToEditorButton = new javax.swing.JButton();
        sourceEditorScrollPane = new javax.swing.JScrollPane();
        sourceEditor = new javax.swing.JTextArea();
        editorToSourceButton = new javax.swing.JButton();
        abstractMelodyScrollPane = new javax.swing.JScrollPane();
        abstractMelodyField = new javax.swing.JTextArea();
        saveGrammarAsButton = new javax.swing.JButton();

        setTitle("Editor");
        setAlwaysOnTop(true);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                windowClosingHandler(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        grammarChooserButton.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        grammarChooserButton.setToolTipText("Load the current grammar to the editor.");
        grammarChooserButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        grammarChooserButton.setLabel("Open Grammar Chooser");
        grammarChooserButton.setMaximumSize(new java.awt.Dimension(600, 40));
        grammarChooserButton.setMinimumSize(new java.awt.Dimension(600, 40));
        grammarChooserButton.setPreferredSize(new java.awt.Dimension(600, 40));
        grammarChooserButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                grammarChooserButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        getContentPane().add(grammarChooserButton, gridBagConstraints);
        grammarChooserButton.getAccessibleContext().setAccessibleDescription("Open the Grammar Chooser");

        sourceToEditorButton.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        sourceToEditorButton.setText("Grammar to Editor");
        sourceToEditorButton.setToolTipText("Load the current grammar to the editor.");
        sourceToEditorButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sourceToEditorButton.setMaximumSize(new java.awt.Dimension(600, 40));
        sourceToEditorButton.setMinimumSize(new java.awt.Dimension(600, 40));
        sourceToEditorButton.setPreferredSize(new java.awt.Dimension(600, 40));
        sourceToEditorButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                sourceToEditorButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        getContentPane().add(sourceToEditorButton, gridBagConstraints);

        sourceEditorScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Grammar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        sourceEditorScrollPane.setMinimumSize(new java.awt.Dimension(600, 400));
        sourceEditorScrollPane.setPreferredSize(new java.awt.Dimension(600, 400));
        sourceEditorScrollPane.setVerifyInputWhenFocusTarget(false);

        sourceEditor.setColumns(20);
        sourceEditor.setLineWrap(true);
        sourceEditor.setRows(5);
        sourceEditor.setAutoscrolls(false);
        sourceEditor.setMinimumSize(new java.awt.Dimension(600, 40000));
        sourceEditor.setPreferredSize(new java.awt.Dimension(600, 40000));
        sourceEditorScrollPane.setViewportView(sourceEditor);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.4;
        getContentPane().add(sourceEditorScrollPane, gridBagConstraints);

        editorToSourceButton.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        editorToSourceButton.setToolTipText("Load the editor contents to the current grammar.\n");
        editorToSourceButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editorToSourceButton.setLabel("Editor to Grammar (also saves grammar)");
        editorToSourceButton.setMaximumSize(new java.awt.Dimension(600, 40));
        editorToSourceButton.setMinimumSize(new java.awt.Dimension(600, 40));
        editorToSourceButton.setPreferredSize(new java.awt.Dimension(600, 40));
        editorToSourceButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                editorToSourceButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        getContentPane().add(editorToSourceButton, gridBagConstraints);

        abstractMelodyScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Abstract Melody Reference", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        abstractMelodyScrollPane.setMinimumSize(new java.awt.Dimension(223, 180));
        abstractMelodyScrollPane.setPreferredSize(new java.awt.Dimension(223, 180));

        abstractMelodyField.setEditable(false);
        abstractMelodyField.setColumns(20);
        abstractMelodyField.setLineWrap(true);
        abstractMelodyField.setRows(500);
        abstractMelodyField.setBorder(null);
        abstractMelodyField.setMinimumSize(new java.awt.Dimension(440, 100));
        abstractMelodyField.setPreferredSize(new java.awt.Dimension(440, 400));
        abstractMelodyScrollPane.setViewportView(abstractMelodyField);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        getContentPane().add(abstractMelodyScrollPane, gridBagConstraints);

        saveGrammarAsButton.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        saveGrammarAsButton.setText("Save Grammar As ...");
        saveGrammarAsButton.setToolTipText("Saves the grammar to a new file.");
        saveGrammarAsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveGrammarAsButton.setMaximumSize(new java.awt.Dimension(600, 40));
        saveGrammarAsButton.setMinimumSize(new java.awt.Dimension(600, 40));
        saveGrammarAsButton.setPreferredSize(new java.awt.Dimension(600, 40));
        saveGrammarAsButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveGrammarAsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        getContentPane().add(saveGrammarAsButton, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sourceToEditorButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_sourceToEditorButtonActionPerformed
    {//GEN-HEADEREND:event_sourceToEditorButtonActionPerformed
    fillEditor();
    }//GEN-LAST:event_sourceToEditorButtonActionPerformed

    public void fillEditor()
    {
    cm.execute(new GrammarToEditorCommand(notate.getGrammarFileName(), this));
    if( firstTime )
      {
      sourceEditor.moveCaretPosition(0);
      firstTime = false;
      }
    }
    
    private void editorToSourceButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_editorToSourceButtonActionPerformed
    {//GEN-HEADEREND:event_editorToSourceButtonActionPerformed
    cm.execute(new EditorToGrammarCommand(notate.getGrammarFileName(), this));
    notate.reloadGrammar();
    }//GEN-LAST:event_editorToSourceButtonActionPerformed

private void windowClosingHandler(java.awt.event.WindowEvent evt)//GEN-FIRST:event_windowClosingHandler
  {//GEN-HEADEREND:event_windowClosingHandler

  }//GEN-LAST:event_windowClosingHandler

    private void grammarChooserButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_grammarChooserButtonActionPerformed
    {//GEN-HEADEREND:event_grammarChooserButtonActionPerformed
        notate.openGrammarMenuDialog();
        
    }//GEN-LAST:event_grammarChooserButtonActionPerformed

    private void saveGrammarAsButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveGrammarAsButtonActionPerformed
    {//GEN-HEADEREND:event_saveGrammarAsButtonActionPerformed
        notate.saveGrammarAs();
        setTitle(notate.getGrammarFileName());
    }//GEN-LAST:event_saveGrammarAsButtonActionPerformed
    
    //used when calling the grammar to editor button automatically from Notate
    public void performEditorToSourceButton(java.awt.event.ActionEvent evt) {
        editorToSourceButtonActionPerformed(evt);
    }
    
    public void setAbstractMelodyField(String string) {
        abstractMelodyField.setText(string);
        abstractMelodyField.setCaretPosition(0);
        abstractMelodyScrollPane.getViewport().setViewPosition(new Point(0, 0));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea abstractMelodyField;
    private javax.swing.JScrollPane abstractMelodyScrollPane;
    private javax.swing.JButton editorToSourceButton;
    private javax.swing.JButton grammarChooserButton;
    private javax.swing.JButton saveGrammarAsButton;
    private javax.swing.JTextArea sourceEditor;
    private javax.swing.JScrollPane sourceEditorScrollPane;
    private javax.swing.JButton sourceToEditorButton;
    // End of variables declaration//GEN-END:variables
    
}
